#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), '../lib')

require 'awsam'

require 'optparse'

def read_val(prompt, default = nil)
  begin
    if default
      print "#{prompt} [#{default}]: "
    else
      print "#{prompt}: "
    end

    val = gets.chomp
    if val.empty? && default
      val = default
    end
  end while val.empty?

  val
end

Awsam::Accounts::load!

$options = {}
$cmd = nil

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: raem [options]\n"

  # help
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end

  opts.on('--add') do
    $cmd = :add_account
  end

  opts.on('--remove') do
    $cmd = :remove_account
  end

  opts.on('--account <ACCOUNT>') do |acctname|
    $options[:account] = acctname
  end

  opts.on('--import-key') do
    $cmd = :import_key
  end

  opts.on('--keyname <KEYNAME>') do |keyname|
    $options[:keyname] = keyname
  end

  opts.on('--keyfile <KEYFILE>') do |keyfile|
    $options[:keyfile] = keyfile
  end

  opts.on('--list') do
    $cmd = :list
  end

  opts.on('--environ') do
    $cmd = :environ
  end

  opts.on('--init') do
    $cmd = :init
  end
end

optparse.parse!(ARGV)

if [:remove_account, :import_key, :environ].include?($cmd) &&
    !$options[:account]
  puts "Command requires account"
  exit 1
end

case $cmd
when :init
  Awsam::init_awsam

when :list
  inuse = ENV['AWSAM_ACTIVE_ACCOUNT']
  puts "\nAWS Accounts:\n\n"

  accts = Awsam::Accounts::get
  accts.each_pair do |name, acct|
    desc = acct.desc ? " [#{acct.desc}]" : ""
    if acct.keys.length > 0
      desc += " [#{acct.keys.length} keys]"
    end
    pfx = inuse == name ? "=> " : "   "
    puts "#{pfx}#{name}#{desc}"
  end

  puts

when :environ
  accts = Awsam::Accounts::get
  accts[$options[:account]].print_environ

when :add_account
  puts "Creating a new AWS account...\n"
  short_name = read_val("Short name")
  desc = read_val("Description")
  access_key = read_val("Access key", ENV['AMAZON_ACCESS_KEY_ID'])
  secret_key = read_val("Secret key", ENV['AMAZON_SECRET_ACCESS_KEY'])
  aws_id = read_val("AWS ID", ENV['AMAZON_AWS_ID'])
  ec2_cert = read_val("Cert key file", ENV['EC2_CERT'])
  ec2_priv_key = read_val("Private key file", ENV['EC2_PRIVATE_KEY'])

  acct = Awsam::Account.new(short_name,
                            { :description => desc,
                              :access_key => access_key,
                              :secret_key => secret_key,
                              :aws_id => aws_id
                            })
  acct.save

  acct.import_certs(ec2_cert, ec2_priv_key)

when :remove_account
  acct = Awsam::Accounts.find($options[:account])
  unless acct
    puts "Unable to find account #{$options[:account]}"
    exit 1
  end

  acct.remove

when :import_key
  unless $options[:keyname] && $options[:keyfile]
    puts "Requires keyname and keyfile!"
    exit 1
  end

  acct = Awsam::Accounts.find($options[:account])
  unless acct
    puts "Unable to find account #{$options[:account]}"
    exit 1
  end

  display = acct.name + (acct.desc ? " [#{acct.desc}]" : "")

  unless File.exist?($options[:keyfile])
    puts "Unable to locate key file: #{$options[:keyfile]}"
    exit 1
  end

  ret = acct.import_key($options[:keyname], $options[:keyfile])
  puts "Imported key pair #{$options[:keyname]} for account #{display}"
end


# Local Variables:
# mode: ruby
# End:
